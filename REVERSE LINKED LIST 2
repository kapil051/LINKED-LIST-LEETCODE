Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]
Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]
 

Constraints:

The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n
 

Follow up: Could you do it in one pass?

********************************************************************************APPROACH 1**************************************************************************
//MAKE COPY IN THE VECTOR AND REVERSE THE REQUIRED POSITONS

class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        
        if(!head||!head->next) return head;
        
         if(left==right) return head;
     
     
          vector<int> ans;
        
        ListNode *temp=head;
        
        while(temp!=NULL){
            
            ans.push_back(temp->val);
            
            temp=temp->next;
        } 
    
        //REVERSE THE RQUIRED POSITION OF THE VECTOR
     
           int i=left-1;
           int j=right-1;
        
        while(i<j){
            
            int temp=ans[i];
            ans[i]=ans[j];
            ans[j]=temp;
            
            i++;
            j--;
        }
        
        //COPY REVERSE VECTOR TO THE ORIGIONAL LINKED LIST
        
             temp=head;
        
        for(int i=0;i<ans.size();i++){
            
            temp->val=ans[i];
            
            temp=temp->next;
            
            if(temp==NULL) break;
        }
        
        return head;
    }
};

***************************************************************************************APPROACH 2****************************************************


ListNode *reverse(ListNode *head){
    
     if(!head||!head->next) return head;
    
    ListNode *newHead=reverse(head->next);
     
       ListNode *temp=head->next;
        
          temp->next=head;
    
          head->next=NULL;
    
          return newHead;
}


class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        
     
       
        if(!head||!head->next) return head;
        
        if(left==right) return head;
        
          // if(left==1&&right==length(head)) return reverse(head);
        
            ListNode *temp1=head;
            ListNode *prev=NULL;
          
           for(int i=0;i<left-1;i++){
                 prev=temp1;
               temp1=temp1->next;
           }
       
         // cout<<temp1->val<<endl;
               
            ListNode *temp2=temp1;
               
         for(int i=0;i<(right-left);i++){
            
             temp2=temp2->next;
             
         }
        
          // cout<<temp2->val<<endl;
        
          ListNode *front=temp2->next;
        
           //BREAK THE LIST
            temp2->next=NULL;
        
           //REVERSE THE LIST
        ListNode *RL=reverse(temp1);
        
          if(prev==NULL&&front==NULL) return RL;
        
          if(prev==NULL&&front!=NULL){
              
                ListNode *last=RL;
          
             //MOVE LAST TO THE LAST OF THE REVERSE LIST
              while(last->next!=NULL) last=last->next;
              
               last->next=front;
              
              return RL;
          } 
      
           
                ListNode *last=RL;
          
             //MOVE LAST TO THE LAST OF THE REVERSE LIST
             while(last->next!=NULL) last=last->next;
        
           //ATTACH NEW REVERSE TO PREV NEXT
        
        
             prev->next=RL;
        
          //ATTACH LAST NEXT TO FRONT
      
           last->next=front;
        
             return head;
    }
};
