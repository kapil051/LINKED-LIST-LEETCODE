Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]
Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]
 

Constraints:

The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n
 

Follow up: Could you do it in one pass?

********************************************************************************APPROACH 1**************************************************************************
//MAKE COPY IN THE VECTOR AND REVERSE THE REQUIRED POSITONS

class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        
        if(!head||!head->next) return head;
        
         if(left==right) return head;
     
     
          vector<int> ans;
        
        ListNode *temp=head;
        
        while(temp!=NULL){
            
            ans.push_back(temp->val);
            
            temp=temp->next;
        } 
    
        //REVERSE THE RQUIRED POSITION OF THE VECTOR
     
           int i=left-1;
           int j=right-1;
        
        while(i<j){
            
            int temp=ans[i];
            ans[i]=ans[j];
            ans[j]=temp;
            
            i++;
            j--;
        }
        
        //COPY REVERSE VECTOR TO THE ORIGIONAL LINKED LIST
        
             temp=head;
        
        for(int i=0;i<ans.size();i++){
            
            temp->val=ans[i];
            
            temp=temp->next;
            
            if(temp==NULL) break;
        }
        
        return head;
    }
};

***************************************************************************************APPROACH 2****************************************************
