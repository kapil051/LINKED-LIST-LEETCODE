Given the head of a linked list, return the list after sorting it in ascending order.

 

Example 1:


Input: head = [4,2,1,3]
Output: [1,2,3,4]
Example 2:


Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]
Example 3:

Input: head = []
Output: []
 

Constraints:

The number of nodes in the list is in the range [0, 5 * 104].
-105 <= Node.val <= 105
 

Follow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?

**********************************************************APPROACH1*****************************************************************************

class Solution {
public:  
    ListNode* mergeTwoSortedList(ListNode *head1,ListNode *head2){
        
        if(!head1||!head2) return NULL;
        
        if(head1&&!head2) return head1;
        
        if(head2&&!head1) return head2;
    
         ListNode *head=NULL;
         ListNode *tail=NULL;
        
        if(head1->val<head2->val){
            head=head1;
            tail=head1;
            head1=head1->next;
        }
        
        else{
            head=head2;
            tail=head2;
            head2=head2->next;
        }
        
        
        while(head1&&head2){
            
            if(head1->val<head2->val){
                tail->next=head1;
                tail=head1;
                head1=head1->next;
            }
            
            else{
                tail->next=head2;
                tail=head2;                
                head2=head2->next;               
            }
     
        }
        
        
     if(head1){
         tail->next=head1;
         return head;
     }  
        
     if(head2){
         tail->next=head2;
         return head;
     }   
        
        tail->next=NULL;
        
        return head;
    
    }
    
   
    
    ListNode* sortList(ListNode* head) {
    
              
        if(!head||!head->next) return head;
        
        ListNode *temp=NULL;
        ListNode *slow=head;
        ListNode *fast=head;
        
        while(fast!=NULL&&fast->next!=NULL){
            temp=slow;
            slow=slow->next;
            fast=fast->next->next;
        }
        
         temp->next=NULL;
      
        
       ListNode *l1= sortList(head);
       ListNode *l2= sortList(slow);
   
      return mergeTwoSortedList(l1,l2);
    
    }
};
